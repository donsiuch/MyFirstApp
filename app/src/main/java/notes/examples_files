/*
 * FILE READING/WRITING CODE EXAMPLES
 *
 */

import FileManager.FileManager;
import FileManager.FileWorker;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
	
	/** DELETE
	 * Discards the current taskList, reads each line of the records file and populates a new task list
	 * 
	 * @param context Context of the calling activity
	 * @param filename File name 
	 * @param tasksAsStrings 
	 * @return void
	 */
	public void loadTasksFromFile(Context context, String filename){
		discardTasks();
		FileWorker worker = new FileWorker(context, filename);
		String raw = "";
		RecordTextProcessor extractor = new RecordTextProcessor();
		while (raw != null) {
			raw = worker.readLine(); // Utilizes the 
			if (raw != null)
				tasks.add(new Task(extractor.process(raw)));
		}
	}
	
	/** DELETE
 	 * Given a file, write the task list to the file
	 * 
	 * @param file File handle
	 * @return void
	 */
	private void writeToFile(File file){
		try {
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(tasks.toString());
			bw.close();
		} catch (Exception e){
			e.printStackTrace();
		}	
	}
	
	==============================================================
	
	/*
 * KNOWN BUGS
 * 
 * DO NOT USE A COMMA AS A DELIMETER! USER CANNOT USE COMMAS IN DESCRIPTION!!!!
 * 
 */

package Utility;

import java.util.Calendar;
import Task.Task;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RecordTextProcessor {
	
	// Key names
	final private static String MONTH = "MONTH";
	final private static String DAY = "DAY_OF_MONTH";
	final private static String YEAR = "YEAR";
	final private static String HOUR_OF_DAY = "HOUR_OF_DAY";
	final private static String MINUTE = "MINUTE";
	final private static String ID = "ID";
	final private static String DESCRIPTION = "DESCRIPTION";
	
	// Denote the character immediately before the key. 
	// Required to prevent matching a pattern internal to a token
	// This is not necessary if a database is used
	final private static String BEGIN_COMMA = ",";
	final private static String BEGIN_R_BRACKET = "]";
	
	// key-value separator 
	final private static String DELIM = "=";
	
	/**
	 * Given a line from the record text file, extract the relevant values and
	 * create a new task. Return this task
	 * 
	 * @param taskAsString The line from the records file
	 * @return Task created from the records file
	 */
	public Task process(String taskAsString){
		int month = Integer.parseInt(extractValue(BEGIN_COMMA + MONTH + DELIM, taskAsString));
		int day = Integer.parseInt(extractValue(BEGIN_COMMA + DAY + DELIM, taskAsString)); //Problem
		int year = Integer.parseInt(extractValue(BEGIN_COMMA + YEAR + DELIM, taskAsString));
		int hourOfDay = Integer.parseInt(extractValue(BEGIN_COMMA + HOUR_OF_DAY + DELIM, taskAsString));
		int minute = Integer.parseInt(extractValue(BEGIN_COMMA + MINUTE + DELIM, taskAsString));
		int id = Integer.parseInt(extractValue(BEGIN_R_BRACKET + ID + DELIM, taskAsString)); // Problem
		String description = extractValue(BEGIN_COMMA + DESCRIPTION + DELIM, taskAsString);
		return new Task(month, day, year, hourOfDay, minute, id, description);
	}
	
	/**
	 * Given a key, extract the corresponding value from the taskAsString string
	 * This method is specific to this project. taskAsString has the following format:
	 * key:value,key:value,
	 *  
	 * @param key The key to a corresponding value
	 * @param taskAsString The entire "hash"
	 * @return The extracted value
	 */
	private String extractValue(String key, String taskAsString){
		String value = "";
		int keySize = key.length();
		//int index = taskAsString.indexOf(key, 0)+keySize;
		
		// Regex pattern
		Pattern pattern = Pattern.compile(key);
		Matcher matcher = pattern.matcher(taskAsString);
		matcher.find();
		int index = matcher.start()+keySize;
		while (taskAsString.charAt(index) != ','){
			value += taskAsString.charAt(index);
			index += 1;
		}
		return value;
	}
}
=======================================================

		// Experiment
		String messageTest = "";
		try {
			FileInputStream fin = openFileInput("records.txt");
			int c;
			while ((c = fin.read()) != -1) {
				messageTest = messageTest + Character.toString((char) c);
			}
			fin.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

=======================================================

/*
 * CURRENTLY UNUSED. OLD CODE
 */

package FileManager;

import android.content.Context;
import java.io.File;

public class FileManager {

	/**
	 * Get the absolute path to the internal storage folder
	 *
	 * @param context Which application
	 * @return Absolute path to the internal storage
	 */
	public String getFileSaveLocation(Context context){
		return context.getFilesDir().getAbsolutePath();
	}

	/**
	 * Creates a new file
	 *
	 * @param context
	 * @param filename Filename
	 * @return a handle to the new file
	 */
	public File createFile(Context context, String filename){
		File file = new File(context.getFilesDir(), filename);
		return file;
	}
}

=======================================================

/*
 * CURRENTLY UNUSED. OLD CODE
 */

package FileManager;

import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

import android.content.Context;

public class FileWorker {

	private Context context;
	private BufferedReader reader;
	private String filepath;

	public FileWorker(){
		reader = null;
		filepath = null;
	}

	public FileWorker(Context context, String filepath){
		this.context = context;
		reader = null;
		this.filepath = filepath;
	}

	/**
	 * Reads a line from a file. If the file isn't open for reading, open it.
	 * An internal pointer is maintained and thus for every subsequent call to readLine(),
	 * the next line of the file is read.
	 *
	 * @param filepath The path to the file to read.
	 * @return The line read or null if no more lines to read
	 */
	public String readLine(){
		String raw = null;
		boolean readyToRead = false;

		if (reader == null){
			if (openForReading())
				readyToRead = true;
		}
		else
			readyToRead = true;

		if (readyToRead){
			try {
				raw = reader.readLine();
			} catch (IOException e){
				PrintWriter pw = null;
				e.printStackTrace(pw);
				String error = pw.toString();
			}
		}
		return raw;
	}

	/**
	 * Opens a file via filepath for reading
	 *
	 * @param filepath The path to the file of interest
	 * @return True if both FileReader, BufferedReader and filepath are successfully populated. Else false
	 */
	private boolean openForReading (){
		boolean result = true;
		try {
			FileReader fr = new FileReader(context.getFilesDir() + "/" + filepath);
			reader = new BufferedReader(fr);
		} catch (IOException e){
			reader = null;
			result = false;
			PrintWriter pw = null;
			e.printStackTrace(pw);
			String error = pw.toString();
			int test = 0;
		}
		return result;
	}
}

